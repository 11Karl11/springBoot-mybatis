<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hangz.spring.mybatis.mapper.TestUserMapper">
    <resultMap id="BaseResultMap" type="com.hangz.spring.mybatis.entity.TestUser">
        <!--@mbg.generated-->
        <id column="id" jdbcType="VARCHAR" property="id"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="address" jdbcType="VARCHAR" property="address"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
    </resultMap>
    <resultMap id="test1" type="TestUser">
        <result property="id" column="uid"></result>
    </resultMap>

    <resultMap id="testConstruct" type="TestUser">
        <constructor>
            <idArg column="uid" name="id" javaType="string"></idArg>
            <arg column="username" name="username" javaType="string"></arg>
        </constructor>
    </resultMap>
    <resultMap id="test2" type="TestUser">
        <id property="id" column="id"></id>
        <result property="username" column="username"></result>
        <result property="password" column="password"></result>
        <result property="address" column="address"></result>
        <result property="email" column="email"></result>

        <association property="role" javaType="Role">
            <id property="id" column="role_id"></id>
            <result property="name" column="role_name"></result>
            <result property="userId" column="user_id"></result>
        </association>
    </resultMap>

    <resultMap id="test21" type="TestUser">
        <id property="id" column="id"></id>
        <result property="username" column="username"></result>
        <result property="password" column="password"></result>
        <result property="address" column="address"></result>
        <result property="email" column="email"></result>

    </resultMap>

    <resultMap id="test3" type="TestUser">
        <id property="id" column="id"></id>
        <result property="username" column="username"></result>
        <result property="password" column="password"></result>
        <result property="address" column="address"></result>
        <result property="email" column="email"></result>

        <collection  property="roles" ofType="Role">
            <id property="id" column="role_id"></id>
            <result property="name" column="role_name"></result>
            <result property="userId" column="user_id"></result>
        </collection >
    </resultMap>

    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        id, username, `password`, address, email
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        <!--@mbg.generated-->
        select
        <include refid="Base_Column_List"/>
        from test_user
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        <!--@mbg.generated-->
        delete from test_user
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="com.hangz.spring.mybatis.entity.TestUser">
        <!--@mbg.generated-->
        insert into test_user (id, username, `password`,
        address, email)
        values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
        #{address,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="com.hangz.spring.mybatis.entity.TestUser">
        <!--@mbg.generated-->
        insert into test_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="username != null and username != ''">
                username,
            </if>
            <if test="password != null and password != ''">
                `password`,
            </if>
            <if test="address != null and address != ''">
                address,
            </if>
            <if test="email != null and email != ''">
                email,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="username != null and username != ''">
                #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null and password != ''">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="address != null and address != ''">
                #{address,jdbcType=VARCHAR},
            </if>
            <if test="email != null and email != ''">
                #{email,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.hangz.spring.mybatis.entity.TestUser">
        <!--@mbg.generated-->
        update test_user
        <set>
            <if test="username != null and username != ''">
                username = #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null and password != ''">
                `password` = #{password,jdbcType=VARCHAR},
            </if>
            <if test="address != null and address != ''">
                address = #{address,jdbcType=VARCHAR},
            </if>
            <if test="email != null and email != ''">
                email = #{email,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.hangz.spring.mybatis.entity.TestUser">
        <!--@mbg.generated-->
        update test_user
        set username = #{username,jdbcType=VARCHAR},
        `password` = #{password,jdbcType=VARCHAR},
        address = #{address,jdbcType=VARCHAR},
        email = #{email,jdbcType=VARCHAR}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <select id="test1" resultMap="testConstruct">
    select
    id as uid,username,password,address,email
    from test_user
    where id=#{id}

  </select>
    <select id="test2" resultMap="test2">
    
     SELECT
            u.id,
            u.username,
            u.password,
            u.address,
            u.email,
            r.id as 'role_id',
            r.name as 'role_name',
            r.user_id
        FROM
            test_user u
                LEFT JOIN role r ON u.id = r.user_id
        where u.id=#{id}


  </select>
    <select id="test3" resultMap="test3">

     SELECT
            u.id,
            u.username,
            u.password,
            u.address,
            u.email,
            r.id as 'role_id',
            r.name as 'role_name',
            r.user_id
        FROM
            test_user u
                LEFT JOIN role r ON u.id = r.user_id
        where u.id=#{id}
    </select>
    <select id="test21" resultMap="test21">

     SELECT
            u.id,
            u.username,
            u.password,
            u.address,
            u.email,
            r.id as 'role.id',
            r.name as 'role.name',
            r.user_id as 'role.userId'
        FROM
            test_user u
                LEFT JOIN role r ON u.id = r.user_id
        where u.id=#{id}

    </select>

</mapper>